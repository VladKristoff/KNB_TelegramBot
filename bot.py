import telebot
import config
from telebot import types
from random import choice
import sqlite3
import os

bot = telebot.TeleBot(f'{config.TOKEN}')

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
def set_bot_commands():
    commands = [
        types.BotCommand('start', "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand('help', "–ü–æ–º–æ—â—å –∏ –ø—Ä–∞–≤–∏–ª–∞"),
        types.BotCommand('stats', "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand('reset', "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
    ]
    bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_users_stats(user_id, username):
    conn = sqlite3.connect('data\data.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user == None:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('INSERT INTO users (user_id, username, wins, losses, draws) VALUES (?, ?, 0, 0, 0)', (user_id, username))
        conn.commit()
        stats = {'wins': 0, 'losses': 0, 'draws': 0}
    else:
        stats = stats = {'wins': user[2], 'losses': user[3], 'draws': user[4]}

    conn.close()
    return stats

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id, result):
    conn = sqlite3.connect('data\data.db')
    cursor = conn.cursor()

    if result == 'win':
        cursor.execute('UPDATE users SET wins = wins + 1 WHERE user_id = ?', (user_id,))

    elif result == 'lose':
        cursor.execute('UPDATE users SET losses = losses + 1 WHERE user_id = ?', (user_id,))
    
    else:
        cursor.execute("UPDATE users SET draws = draws + 1 WHERE user_id = ?", (user_id,))

    conn.commit()
    conn.close()

def reset_user_stats(user_id):
    conn = sqlite3.connect('data\data.db')
    cursor = conn.cursor()

    conn.execute('UPDATE users SET wins = 0, losses = 0, draws = 0 WHERE user_id = ?', (user_id,))

    conn.commit()
    conn.close()

set_bot_commands()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    get_users_stats(user_id, username)

    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–æ–∫
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    button1 = types.KeyboardButton("–ö–∞–º–µ–Ω—å ‚úä")
    button2 = types.KeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è")
    button3 = types.KeyboardButton("–ë—É–º–∞–≥–∞ ‚úã")
    keyboard.add(button1, button2, button3) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    bot.reply_to(message, '–ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=keyboard)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['help'])
def help(message):
    help_text = """
üéÆ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:
‚Ä¢ –ö–∞–º–µ–Ω—å –±—å–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã
‚Ä¢ –ù–æ–∂–Ω–∏—Ü—ã –±—å—é—Ç –±—É–º–∞–≥—É  
‚Ä¢ –ë—É–º–∞–≥–∞ –±—å–µ—Ç –∫–∞–º–µ–Ω—å

–ö–æ–º–∞–Ω–¥—ã:
/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
/stats - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
/reset - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
    bot.send_message(message.chat.id, help_text)
    
# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á—ë—Ç–∞
@bot.message_handler(commands=['stats'])
def stats(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_is_premium = getattr(message, 'is_premium', False)

    stats = get_users_stats(user_id, username)

    total_games = stats['wins'] + stats['losses'] + stats['draws']

    if stats['wins'] > 0:
        wins_perc = stats['wins'] / total_games * 100
    else:
        wins_perc = 0

    stats_info = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
–ò–º—è: {message.from_user.first_name}
ID: {user_id}
Username: {username}
Premium: {"‚úÖ –î–∞" if user_is_premium else "‚ùå –ù–µ—Ç"}

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–ü–æ–±–µ–¥: {stats['wins']} üéâ
–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']} üò¢
–ù–∏—á—å–∏—Ö: {stats['draws']} üòê
–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}

–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {wins_perc:.1f}% üìà
    """

    bot.send_message(message.chat.id, stats_info)

# –°–±—Ä–æ—Å —Å—á—ë—Ç–∞
@bot.message_handler(commands=['reset'])
def reset(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    stats = get_users_stats(user_id, username)
    total_games = stats['wins'] + stats['losses'] + stats['draws']

    if total_games == 0:
        bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞')

    else:
        reset_user_stats(user_id)
        bot.send_message(message.chat.id, '‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞')


# –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    choices = ["–ö–∞–º–µ–Ω—å ‚úä", "–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è", "–ë—É–º–∞–≥–∞ ‚úã"]
    user_choice = message.text
    computer_choice = choice(choices)

    if user_choice not in choices:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞')
        return

    else:
        bot.send_message(message.chat.id, f'–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª: "{computer_choice}"') # –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∫–æ–ø–º—å—é—Ç–µ—Ä
        bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: "{user_choice}"') # –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_choice == computer_choice:
            bot.send_message(message.chat.id, '–ù–∏—á—å—è')
            result = 'draw'

        elif (user_choice == "–ö–∞–º–µ–Ω—å ‚úä" and computer_choice == "–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è") or \
              (user_choice == "–ë—É–º–∞–≥–∞ ‚úã" and computer_choice == "–ö–∞–º–µ–Ω—å ‚úä") or \
              (user_choice == "–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è" and computer_choice == "–ë—É–º–∞–≥–∞ ‚úã"):
            bot.send_message(message.chat.id, '–í—ã –≤—ã–π–≥—Ä–∞–ª–∏')
            result = 'win'

        else:
            bot.send_message(message.chat.id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
            result = 'lose'
    
    update_user_stats(user_id, result)
    get_users_stats(user_id, username)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.remove_webhook()
    bot.polling(non_stop=True)